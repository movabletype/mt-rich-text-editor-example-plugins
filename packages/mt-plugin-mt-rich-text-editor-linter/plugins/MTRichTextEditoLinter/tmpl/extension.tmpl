<mt:setvarblock name="js_include" append="1">
  <!-- <__trans_section component="richtexteditorlinter"> -->
  <template id="rich-text-editor-linter-icon">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="icon icon-tabler icons-tabler-outline icon-tabler-circle-x"
    >
      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
      <path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" />
      <path d="M10 10l4 4m0 -4l-4 4" />
    </svg>
  </template>
  <template id="rich-text-editor-linter-style">
    <style>
      :host {
        position: relative;
      }

      .rich-text-editor-linter-button {
        display: inline-flex;
        align-items: center;
        gap: 4px;
        border: none;
        background: none;
        cursor: pointer;
        padding: 0;
        margin: 0;
        color: #c00;
      }

      .rich-text-editor-linter-panel {
        display: flex;
        flex-direction: column;
        position: absolute;
        top: 100%;
        left: 0;
        width: 200px;
        background: #fff;
        border: 1px solid #ccc;
        padding: 6px;
        z-index: 1000;
        border-radius: 4px;
      }

      .rich-text-editor-linter-panel ul {
        margin: 0;
        padding: 0;
        list-style: none;
      }

      .rich-text-editor-linter-panel li {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 4px;
      }

      .rich-text-editor-linter-panel li button {
        cursor: pointer;
      }

      .d-none {
        display: none;
      }
    </style>
  </template>
  <script type="module">
    // define keywords to be checked
    const keywords = ["Movable Type"];

    // prepare a regular expression (edit distance 1) for each keyword.
    const keywordMap = keywords.map((keyword) => {
      const regex = [];
      for (let i = 0; i < keyword.length; i++) {
        const before = keyword.substring(0, i);
        const after = keyword.substring(i + 1);
        regex.push(`${before}[a-zA-Z0-9]${after}`);
        if (i > 0 && i < keyword.length - 1) {
          regex.push(`${before}${after}`);
        }
      }
      return {
        keyword,
        regex: new RegExp(`(?!${keyword})(${regex.join("|")})`),
      };
    });

    function getAllTextNodes(node) {
      const nodes = [];
      if (node.nodeType === Node.TEXT_NODE) {
        nodes.push(node);
      } else {
        node.childNodes.forEach((child) => {
          nodes.push(...getAllTextNodes(child));
        });
      }
      return nodes;
    }

    class RichTextEditorLinter extends MTRichTextEditor.Component.StatusbarItemElement {
      button;
      counter;
      panel;

      constructor() {
        super();
        const shadowRoot = this.shadowRoot;

        const style = document
          .querySelector("#rich-text-editor-linter-style")
          .content.firstElementChild.cloneNode(true);
        shadowRoot.appendChild(style);

        this.button = document.createElement("button");
        this.button.classList.add(
          "d-none",
          "rich-text-editor-linter-button"
        );
        this.button.appendChild(
          document
            .querySelector("#rich-text-editor-linter-icon")
            .content.firstElementChild.cloneNode(true)
        );
        this.counter = document.createElement("span");
        this.button.appendChild(this.counter);
        shadowRoot.appendChild(this.button);

        this.panel = document.createElement("div");
        this.panel.classList.add("rich-text-editor-linter-panel");
        this.panel.classList.add("d-none");
        shadowRoot.appendChild(this.panel);

        this.button.addEventListener("click", () => {
          this.panel.classList.toggle("d-none");
        });
      }

      // called when content updated or selection changed.
      onEditorUpdate() {
        const textNodes = getAllTextNodes(this.tiptap.view.dom);

        const result = [];
        keywordMap.forEach((keyword) => {
          textNodes.forEach((node) => {
            const match = node.textContent.match(keyword.regex);
            if (match) {
              result.push({
                match: match[0],
                fix: () => {
                  node.textContent = node.textContent.replace(
                    match[0],
                    keyword.keyword
                  );
                },
              });
            }
          });
        });

        if (result.length > 0) {
          this.counter.textContent = result.length.toString();
          this.button.classList.remove("d-none");

          this.panel.innerHTML = "";

          const list = document.createElement("ul");
          result.forEach((match) => {
            const item = document.createElement("li");
            const span = document.createElement("span");
            span.textContent = match.match;
            const button = document.createElement("button");
            button.textContent = "<__trans phrase='Fix' encode_js='1' />";
            item.appendChild(span);
            item.appendChild(button);
            list.appendChild(item);

            button.addEventListener("click", () => {
              match.fix();
            });
          });

          this.panel.appendChild(list);
        } else {
          this.button.classList.add("d-none");
          this.panel.classList.add("d-none");
        }
      }
    }

    // register the component as a custom element with the "mt-rich-text-editor-statusbar-item-" prefix.
    customElements.define(
      "mt-rich-text-editor-statusbar-item-linter",
      RichTextEditorLinter
    );

    // install the item "linter" in the status bar.
    MTRichTextEditor.on("create", (options) => {
      options.statusbar[0].push("linter"); // left side: 0, right side: 1
    });
  </script>
  <!-- </__trans_section> -->
</mt:setvarblock>
